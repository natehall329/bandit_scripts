p_present
table(p_present)
hist(p_present)
hist(p_present[which(p_present != 0)])
table(p_present[which(p_present > 0 & p_present <=.95)])
sum(table(p_present[which(p_present > 0 & p_present <=.95)]))
p_pres_tab <- table(p_present)
nless95 <- sum(p_pres_tab[which(as.numeric(names(p_pres_tab)) != 0 & as.numeric(names(p_pres_tab)) < .95) ])
nbrain <- sum(p_pres_tab[which(as.numeric(names(p_pres_tab)) != 0 )])
nless95/nbrain
nless95
nless95/nbrain
df_present <- reshape2::melt(p_present, varnames=c("x", "y", "z"), value.name="p_present")
miss_info <- df_present %>% filter(p_present < 1 & p_present > 0) %>% arrange(p_present)
miss_info
#look at missingness by subject
specc_info$miss_by_subj <- apply(full, 4, function(subj) {
sum(mni_mask[!(mni_mask & subj)]) #number of voxels from MNI mask that are not present in subject
})
specc_info
specc_info$miss_by_subj
mean(specc_info$miss_by_subj)
hist(specc_info$miss_by_subj)
filter(specc_info, miss_by_subj > 2000) %>% arrange(desc(miss_by_subj)) %>% select(NUM_ID, SPECC_ID, Luna_ID, Wrong_fmap_dims, mean_fd, miss_by_subj)
sub(expect_mr_file, "awuktm_mean_float.nii.gz", specc_info$mr_file, fixed=TRUE)
#QA check: correlate mean functionals in MNI space before voxelwise intensity normalization
specc_info$mean_img <- sub(expect_mr_file, "awuktm_mean_float.nii.gz", specc_info$mr_file, fixed=TRUE)
fslcmd <- paste0("fslmerge -t ", file.path(fsl_workdir, "mean_merge"), " ", paste(specc_info$mean_img, collapse=" "))
runFSLCommand(fslcmd)
mean_imgs <- readNIfTI(file.path(fsl_workdir, "mean_merge.nii.gz"), reorient=FALSE)
similarity <- apply(mean_imgs, 4, function(mat) {
vv <- as.vector(mat[mask_log]) #vector of voxels in MNI mask
vv <- psych::winsor(vv, trim=0.05) #cut down on odd/extreme intensity values
return(vv)
})
subj_sims <- cor(similarity)
diag(subj_sims) <- NA
subj_agg <- rowMeans(subj_sims, na.rm=TRUE)
specc_info$mean_func_similarity <- subj_agg
hist(subj_agg)
filter(specc_info, mean_func_similarity < .65) #folks we may want to check, though on first glance, nothing seems troubling
##ROI Diagnostics, round 1: look at missingness in the full Schaefer 422 parcellation (slightly masked by FSL MNI)
roi_dir <- file.path(basedir, "roi_diagnostics_mnh_200")
paste0(roi_dir, "/", tolower(specc_info$file_id), "*roidiagnostics_*fsl.csv")
paste0(roi_dir, "/", tolower(specc_info$file_id), "*roidiagnostics_*fsl.csv")
file.exists(paste0(roi_dir, "/", tolower(specc_info$file_id), "*roidiagnostics_*fsl.csv"))
file.exists(paste0(roi_dir, "/", tolower(specc_info$file_id), "*roidiagnostics_*fsl.csv"))
paste0(roi_dir, "/", tolower(specc_info$file_id), "*roidiagnostics_*fsl.csv")
paste0(roi_dir, "/", tolower(specc_info$file_id), "*roidiagnostics_*fsl.csv")
file.exists("/mnt/ics/Michael/bpd_rest/roi_diagnostics_mnh_200/10772*roidiagnostics_*fsl.csv")
file.exists(paste0("/mnt/ics/Michael/bpd_rest/roi_diagnostics_mnh_200/10772*roidiagnostics_*fsl.csv"))
paste0(roi_dir, "/", tolower(specc_info$file_id), "*roidiagnostics_*fsl.csv")
basedir
scaf_222 <- readNIfTI("/gpfs/group/mnh5174/default/lab_resources/parcellation/final_combined_jul2018/Schaefer_222_final_jul2018.nii.gz")
scaf_222 <- readNIfTI("/mnt/ics/lab_resources/parcellation/final_combined_jul2018/Schaefer_222_final_jul2018.nii.gz")
scaf_222
mask_display@.Data
table(mask_display@.Data)
mask_display@.Data <- p_present #depict things < 1 and > 0
table(mask_display@.Data)
p_present
table(mask95)
scaf_222 <- readNIfTI("/mnt/ics/lab_resources/parcellation/final_combined_jul2018/Schaefer_222_final_jul2018.nii.gz")
scaf_222[scaf_222 == 57] <- 0
scaf_222 <- scaf_222 *mask95
mask95 <- full
mask95_matrix <- array(0, dim(mask95)[1:3])
mask95_matrix[p_present >= .95] <- 1 #include only voxels where at least 95% of the group is observed/present
mask95@.Data <- mask95_matrix
mask95@dim_[1] <- 3
mask95@dim_[5] <- 1
scaf_222 <- scaf_222 *mask95
writeNIfTI(scaf_222, file.path(basedir, "Parcellation", "Schaefer_221_final_jul2019_fsl_95_group_mask"))
setwd("~/Box/NeuroMAP_eye/")
library(eyelinker)
library(FDBeye)
library(dplyr)
library("R.matlab")
asc_path <- edf2asc("Test.edf")
##strangely, the read.asc function from eyelinkR and the edf.all function from edfR output the data differently. We want something in between so will have to wrangle
dat <- read.asc(asc_path)
asc_path
##strangely, the read.asc function from eyelinkR and the edf.all function from edfR output the data differently. We want something in between so will have to wrangle
dat <- read.asc(paste0(getwd(),asc_path))
paste0(getwd(),asc_path)
##strangely, the read.asc function from eyelinkR and the edf.all function from edfR output the data differently. We want something in between so will have to wrangle
dat <- read.asc(paste0(getwd(),"/",asc_path))
paste0(getwd(),"/",asc_path)
##strangely, the read.asc function from eyelinkR and the edf.all function from edfR output the data differently. We want something in between so will have to wrangle
asc_path <- "/Users/nth7/Box/NeuroMAP_eye/Test.asc"
dat <- read.asc(asc_path)
specc_info
specc_info %>% print(20)
specc_info %>% print(n = 20)
specc_info %>% print(n = 82)
# this is for getting a look at the structure of bandit data bc R > matlab --------
devtools::install_github("matsukik/mrsat")
library(mrsat)
library(tidyverse)
library(rprime)
library(wrapr)
library(reshape2)
basedir <- "~/Desktop/"
datadir <- paste0(basedir, "bandit_scripts/Bandit_withrest")
stims_fun <- function(wm_path, all) {
# browser()
# Read in a text file generated by Eprime
wm_lines <- rprime::read_eprime(wm_path)
# Convert lines from an Eprime file into EprimeFrame objects
wm_frames <- FrameList(wm_lines)
# Make it a data frame.
experiment_df <- to_data_frame(wm_frames)
# Select the columns we want for a tibble called "dat".
#dat <- experiment_df %>% select(qc(topstim, leftstim,rightstim)) #%>% mutate(id = unique(.$Subject))
if(!all){
dat <- experiment_df %>%
select(qc(Arew, Brew, Crew,
topstim, leftstim,rightstim, reinforced1,
reinforced2, reinforced3))#, showstim.RESP, showstim.ACC)) #%>% mutate(id = unique(.$Subject))
} else{dat <- experiment_df}
#
# Only put the actual trials in "dat".
dat <- dat[2:301, ]
dat$topstim <- gsub(".bmp", "",dat$topstim, fixed = TRUE)
dat$leftstim <- gsub(".bmp", "",dat$leftstim, fixed = TRUE)
dat$rightstim <- gsub(".bmp", "",dat$rightstim, fixed = TRUE)
dat
}
datadir <- "/Users/nth7/Desktop/bandit_sandbox/Bandit Data"
datadir <- "/Users/nth7/Downloads/Bandit Data 3"
setwd(datadir)
dirs <- list.dirs(datadir)[-1]
for(sub in list.files()[1:95]){
#sub <- list.dirs("~/Desktop/bandit_scripts/Bandit_withrest")[2]
print(sub)
txt.file <- paste0(sub, "/",list.files(sub)[2])
txt.path <-paste0(getwd(), "/", txt.file)
temp <- stims_fun(txt.path, all = TRUE)
rownames(temp) <- 1:nrow(temp)
write.csv(temp, file = paste0(sub, "/stims_",sub,".csv"), row.names = FALSE, quote = FALSE)
}
# hacky plot of learning curves -------------------------------------------
with_rest <- read.delim("/Users/nth7/Desktop/bandit_scripts/subjs_with_rest.txt",header = FALSE)
pdf(file = "~/Desktop/bandit_scripts/learning_curves_reinforcement_with_rest_to_fit.pdf", width = 11, height = 8 )
xx <- read.csv("~/Desktop/bandit_scripts/Bandit_withrest/10/stims_10.csv")
####get p(reward) by averaging over trial blocks of 10
stepsize = 20
y <- seq(1,300,stepsize)
z <- list()
for(i in 1:length(y)){
if(i == length(y)){
(trials <- y[i]:300)
} else{(trials <- y[i]:(y[i+1]-1))}
these_trials <- xx[trials,]
these_trials$A_avg <- sum(these_trials$Arew)/stepsize
these_trials$B_avg <- sum(these_trials$Brew)/stepsize
these_trials$C_avg <- sum(these_trials$Crew)/stepsize
these_trials$bin <- y[i]
these_trials$trial <- trials
z[[i]] <- these_trials
}
z <- do.call(rbind,z)
z <- dplyr::select(z, -c(topstim, leftstim, rightstim, reinforced1, reinforced2,reinforced3, Arew, Brew,Crew,bin))
zz <- melt(data = z, id.vars = "trial", measure.vars = c("A_avg", "B_avg", "C_avg"))
reinforcement_schedule <- ggplot(zz, aes(x = trial, y = value, color = variable)) + geom_line() +geom_point()+ geom_smooth() +scale_y_continuous(limits = c(0,1))+ ggtitle("Reinforcement Contingency (roughly)")
# plot(reinforcement_schedule)
# subject behavior, for overall and individuals ---------------------------
subs_withrest <- list.files()[which(tolower(list.files()) %in% tolower(with_rest$V1) & !tolower(list.files()) %in% "071_eh")     ]
zzz <- list()
sub_plots <- list()
subs_withrest
getwd()
# bandit read posterior ---------------------------------------------------
basedir <- "~/Desktop/bandit_scripts/vba_output/"; setwd(basedir)
library(R.matlab)
library("rlist")
uber_df <- data_frame()
for(sub in list.files()){
subMat <- readMat(sub)
# posterior <- subMat[["posterior"]][,,1]
# str(posterior)
# dim(posterior)
#
output <- subMat[["out"]][,,1]
# str(output)
#
# output$fit
stats <- output[["suffStat"]]
browser()
val_pe <- names(stats[c(25:35, 37, 40:47),1,1])
to_merge <- stats[c(25:35, 37, 40:47),1,]
stats_df <- data_frame(trial = 1:300)
sub_id <- as.numeric(str_split(sub(pattern = "_bandit_vba_.*", "",sub), "_")[[1]][2])
stats_df$id <- sub_id
for(var in val_pe){
# var <- "delta"
stats_df <- stats_df %>% mutate(!!var := to_merge[[var]][1,])
}
stats_df$PEunsigned.standardized <- as.numeric(scale(sqrt(stats_df$PEunsigned)))
# ggplot(data = stats_df, aes(x = trial, y = PEunsigned)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = PEunsigned.standardized)) + geom_smooth() + geom_point()
#
# ggplot(data = stats_df, aes(x = trial, y = value)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = delta)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = PEsigned)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = value.chosen)) + geom_smooth() + geom_point()
# # stats
# hist(stats_df$PEunsigned.standardized)
uber_df <- rbind(uber_df, stats_df)
}
stats
output
list.files()
identifier <- "_28-Jul-2019_.mat"
to_process <- list.files()[grepl(identifier, list.files())]
to_process
identifier <- "_22-Jul-2019_.mat"
to_process <- list.files()[grepl(identifier, list.files())]
to_process
fits <- data_frame(R2=rep(NA,length(to_process)), class_acc = rep(NA,length(to_process)))
fits
subn <- 1
subMat[["out"]][,,1]$fit
fits[subn,] <- subMat[["out"]][,,1]$fit[c(6,7),]
subMat[["out"]][,,1]$fit[c(6,7),]
fits[subn,] <- subMat[["out"]][,,1]$fit[,1]
subMat[["out"]][,,1]$fit[,1]
fits[subn,] <- subMat[["out"]][,,1]$fit[6]
fits[subn,]
fits[subn,] <- subMat[["out"]][,,1]$fit[c(6,7)]
fits[subn,]
output
stats
stats[[1]]
stats[["value_not_chosen"]]
stats[["value.not.chosen"]]
stats[["F"]]
names(stats)
str(stats)
str(stats, max.list = 10)
str(stats, max.list = 1)
class(stats)
class(stats[,,1])
stats[,,1]
stats[,,1][["F"]]
names(stats[,,1])
stats[,,1][["value.not.chosen"]]
stats[,,1][["value"]]
names(stats[,,1])
stats[,,1][["muX"]]
names(stats[,,1])
val_pe <- names(stats[c(4,21,25:35, 37, 40:47),1,1])
val_pe
to_merge <- stats[c(4,21,25:35, 37, 40:47),1,]
to_merge
names(to_merge)
to_merge[["SigmaX"]]
to_merge[["gx"]]
stats
stats[["gx"]]
stats[,,1][["gx"]]
stats[,,1][["value.chosen"]]
stats[,,1][["gx"]]
value_trace <- stats[,,1][["gx"]]
rep(NA, length(value_trace[,1])
stats[,,1][["gx"]
rep(NA, length(value_trace[,1]))
rep(NA, length(value_trace[1,]))
value_df <- data.frame(val_A = value_trace[1,], val_B = value_trace[2,], val_C = value_trace[3,])
value_df
fits <- data_frame(R2=rep(NA,length(to_process)), class_acc = rep(NA,length(to_process)))
value_list <- list()
value_df <- data.frame(id = sub, val_A = value_trace[1,], val_B = value_trace[2,], val_C = value_trace[3,])
value_df
sub("_bandit_vba_output_valence_22-Jul-2019_.mat","",sub)
sub("id_","",sub("_bandit_vba_output_valence_22-Jul-2019_.mat","",sub))
value_trace <- stats[,,1][["gx"]]
value_df <- data.frame(id = sub("id_","",sub("_bandit_vba_output_valence_22-Jul-2019_.mat","",sub)), val_A = value_trace[1,], val_B = value_trace[2,], val_C = value_trace[3,])
value_df
sub_id
str_split(sub(pattern = "_bandit_vba_.*", "",sub)
str_split(sub(pattern = "_bandit_vba_.*", "",sub), "_")
sub(pattern = "_bandit_vba_.*", "",sub)
str_split(sub(pattern = "_bandit_vba_.*", "",sub), "_")
str_split(sub(pattern = "_bandit_vba_.*", "",sub), "_")[[1]][2]
sub_id <- as.character(str_split(sub(pattern = "_bandit_vba_.*", "",sub), "_")[[1]][2])
sub_id
value_df <- data.frame(id = sub_id, val_A = value_trace[1,], val_B = value_trace[2,], val_C = value_trace[3,])
value_df
# bandit read posterior ---------------------------------------------------
basedir <- "~/Desktop/bandit_scripts/vba_output/"; setwd(basedir)
library(R.matlab)
library("rlist")
identifier <- "_22-Jul-2019_.mat"
to_process <- list.files()[grepl(identifier, list.files())]
uber_df <- data_frame()
fits <- data_frame(R2=rep(NA,length(to_process)), class_acc = rep(NA,length(to_process)))
value_list <- list()
subn
sub_id <- as.character(str_split(sub(pattern = "_bandit_vba_.*", "",sub), "_")[[1]][2])
sub <- to_process[subn]
subMat <- readMat(sub)
# posterior <- subMat[["posterior"]][,,1]
# str(posterior)
# dim(posterior)
#
output <- subMat[["out"]][,,1]
fits[subn,] <- subMat[["out"]][,,1]$fit[c(6,7)]
fits
# str(output)
#
# output$fit
stats <- output[["suffStat"]]
browser()
# browser()
val_pe <- names(stats[c(25:35, 37, 40:47),1,1])
to_merge <- stats[c(25:35, 37, 40:47),1,]
value_trace <- stats[,,1][["gx"]]
value_df <- data.frame(id = sub_id, val_A = value_trace[1,], val_B = value_trace[2,], val_C = value_trace[3,])
value_list[[sub]] <- value_df
stats_df <- data_frame(trial = 1:300)
stats_df$id <- sub_id
for(var in val_pe){
stats_df <- stats_df %>% mutate(!!var := to_merge[[var]][1,])
}
stats_df$PEunsigned.standardized <- as.numeric(scale(sqrt(stats_df$PEunsigned)))
uber_df <- rbind(uber_df, stats_df)
xx <- read.csv("~/Desktop/bandit_scripts/Bandit_withrest/10/stims_10.csv")
####get p(reward) by averaging over trial blocks of 10
stepsize = 20
y <- seq(1,300,stepsize)
z <- list()
for(i in 1:length(y)){
if(i == length(y)){
(trials <- y[i]:300)
} else{(trials <- y[i]:(y[i+1]-1))}
these_trials <- xx[trials,]
these_trials$A_avg <- sum(these_trials$Arew)/stepsize
these_trials$B_avg <- sum(these_trials$Brew)/stepsize
these_trials$C_avg <- sum(these_trials$Crew)/stepsize
these_trials$bin <- y[i]
these_trials$trial <- trials
z[[i]] <- these_trials
}
z <- do.call(rbind,z)
z <- dplyr::select(z, -c(topstim, leftstim, rightstim, reinforced1, reinforced2,reinforced3, Arew, Brew,Crew,bin))
zz <- melt(data = z, id.vars = "trial", measure.vars = c("A_avg", "B_avg", "C_avg"))
reinforcement_schedule <- ggplot(zz, aes(x = trial, y = value, color = variable)) + geom_line() +geom_point()+ geom_smooth() +scale_y_continuous(limits = c(0,1))+ ggtitle("Reinforcement Contingency (roughly)")
reinforcement_schedule
reinforcement_schedule
dev.off()
reinforcement_schedule
reinforcement_schedule <- ggplot(zz, aes(x = trial, y = value, color = variable)) + geom_line() +geom_point()+ geom_smooth() +scale_y_continuous(limits = c(0,1))+ ggtitle("Reinforcement Contingency (roughly)") + labs(y = "reward probability")
reinforcement_schedule
these_trials$A_avg <- smooth(these_trials$Arew)
z <- do.call(rbind,z)
z <- dplyr::select(z, -c(topstim, leftstim, rightstim, reinforced1, reinforced2,reinforced3, Arew, Brew,Crew,bin))
zz <- melt(data = z, id.vars = "trial", measure.vars = c("A_avg", "B_avg", "C_avg"))
reinforcement_schedule <- ggplot(zz, aes(x = trial, y = value, color = variable)) + geom_line() +geom_point()+ geom_smooth() +scale_y_continuous(limits = c(0,1))+ ggtitle("Reinforcement Contingency (roughly)") + labs(y = "reward probability")
reinforcement_schedule
these_trials$A_avg
install.packages("smoother")
library("smoother")
these_trials$A_avg <- smth(these_trials$Arew)
these_trials$A_avg
save(zz, file = "/mnt/ics/Michael/bpd_rest/behavior/bandit_contingency")
save(zz, file = "/mnt/ics/Michael/bpd_rest/behavior/bandit_contingency.RData")
contingency <- load("/mnt/ics/Michael/bpd_rest/behavior/bandit_contingency.RData")
contingency
contingency <- get(load("/mnt/ics/Michael/bpd_rest/behavior/bandit_contingency.RData"))
contingency
reinforcement_schedule <- ggplot(contingency, aes(x = trial, y = value, color = variable)) + geom_line() +geom_point()+ geom_smooth() +scale_y_continuous(limits = c(0,1))+ ggtitle("Reinforcement Contingency (roughly)") + labs(y = "reward probability")
value_df
z <- dplyr::select(value_df, -c(id))
z
value_df$trial <- 1:300
z <- dplyr::select(value_df, -c(id))
zz <- melt(data = z, id.vars = "trial", measure.vars = c("A_val", "B_val", "C_val"))
value_df
zz <- melt(data = z, id.vars = "trial", measure.vars = c("val_A", "val_B", "val_C"))
value_plot <- ggplot(zz, aes(x = trial, y = value, color = variable)) + geom_line() +geom_point()+ geom_smooth() +scale_y_continuous(limits = c(0,1))+ ggtitle("Reinforcement Contingency (roughly)") + labs(y = "value")
value_plot
value_plot <- ggplot(zz, aes(x = trial, y = value, color = variable)) + geom_line() +geom_point()+ geom_smooth() +scale_y_continuous(limits = c(0,1))+ ggtitle("Value Trace") + labs(y = "value")
pdf(file = "~/Desktop/bandit_scripts/value_vs_contingency.pdf", width = 11, height = 8 )
for(subn in 1:length(to_process)){
sub_id <- as.character(str_split(sub(pattern = "_bandit_vba_.*", "",sub), "_")[[1]][2])
sub <- to_process[subn]
subMat <- readMat(sub)
# posterior <- subMat[["posterior"]][,,1]
# str(posterior)
# dim(posterior)
#
output <- subMat[["out"]][,,1]
fits[subn,] <- subMat[["out"]][,,1]$fit[c(6,7)]
# str(output)
#
# output$fit
stats <- output[["suffStat"]]
# browser()
val_pe <- names(stats[c(25:35, 37, 40:47),1,1])
to_merge <- stats[c(25:35, 37, 40:47),1,]
value_trace <- stats[,,1][["gx"]]
value_df <- data.frame(id = sub_id, val_A = value_trace[1,], val_B = value_trace[2,], val_C = value_trace[3,])
value_list[[sub]] <- value_df
stats_df <- data_frame(trial = 1:300)
stats_df$id <- sub_id
for(var in val_pe){
stats_df <- stats_df %>% mutate(!!var := to_merge[[var]][1,])
}
stats_df$PEunsigned.standardized <- as.numeric(scale(sqrt(stats_df$PEunsigned)))
value_df$trial <- 1:300
z <- dplyr::select(value_df, -c(id))
zz <- melt(data = z, id.vars = "trial", measure.vars = c("val_A", "val_B", "val_C"))
value_plot <- ggplot(zz, aes(x = trial, y = value, color = variable)) + geom_line() +geom_point()+ geom_smooth() +scale_y_continuous(limits = c(0,1))+ ggtitle("Value Trace") + labs(y = "value")
cowplot::plot_grid(reinforcement_schedule, value_plot, ncol = 2)
# ggplot(data = stats_df, aes(x = trial, y = PEunsigned)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = PEunsigned.standardized)) + geom_smooth() + geom_point()
#
# ggplot(data = stats_df, aes(x = trial, y = value)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = delta)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = PEsigned)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = value.chosen)) + geom_smooth() + geom_point()
# # stats
# hist(stats_df$PEunsigned.standardized)
uber_df <- rbind(uber_df, stats_df)
}
write_csv(uber_df, paste0("/mnt/ics/Michael/bpd_rest/behavior/bandit_VBA_tidy_",Sys.Date(), ".csv"))
dev.off()
pdf(file = "~/Desktop/bandit_scripts/value_vs_contingency.pdf", width = 11, height = 8 )
for(subn in 1:length(to_process)){
sub_id <- as.character(str_split(sub(pattern = "_bandit_vba_.*", "",sub), "_")[[1]][2])
sub <- to_process[subn]
subMat <- readMat(sub)
# posterior <- subMat[["posterior"]][,,1]
# str(posterior)
# dim(posterior)
#
output <- subMat[["out"]][,,1]
fits[subn,] <- subMat[["out"]][,,1]$fit[c(6,7)]
# str(output)
#
# output$fit
stats <- output[["suffStat"]]
# browser()
val_pe <- names(stats[c(25:35, 37, 40:47),1,1])
to_merge <- stats[c(25:35, 37, 40:47),1,]
value_trace <- stats[,,1][["gx"]]
value_df <- data.frame(id = sub_id, val_A = value_trace[1,], val_B = value_trace[2,], val_C = value_trace[3,])
value_list[[sub]] <- value_df
stats_df <- data_frame(trial = 1:300)
stats_df$id <- sub_id
for(var in val_pe){
stats_df <- stats_df %>% mutate(!!var := to_merge[[var]][1,])
}
#stats_df$PEunsigned.standardized <- as.numeric(scale(sqrt(stats_df$PEunsigned)))
value_df$trial <- 1:300
z <- dplyr::select(value_df, -c(id))
zz <- melt(data = z, id.vars = "trial", measure.vars = c("val_A", "val_B", "val_C"))
value_plot <- ggplot(zz, aes(x = trial, y = value, color = variable)) + geom_line() +geom_point()+ geom_smooth() +scale_y_continuous(limits = c(0,1))+ ggtitle("Value Trace") + labs(y = "value")
cowplot::plot_grid(reinforcement_schedule, value_plot, ncol = 2)
# ggplot(data = stats_df, aes(x = trial, y = PEunsigned)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = PEunsigned.standardized)) + geom_smooth() + geom_point()
#
# ggplot(data = stats_df, aes(x = trial, y = value)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = delta)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = PEsigned)) + geom_smooth() + geom_point()
# ggplot(data = stats_df, aes(x = trial, y = value.chosen)) + geom_smooth() + geom_point()
# # stats
# hist(stats_df$PEunsigned.standardized)
uber_df <- rbind(uber_df, stats_df)
}
dev.off()
sub
sub_id <- as.character(str_split(sub(pattern = "_bandit_vba_.*", "",sub), "_")[[1]][2])
sub <- to_process[subn]
subMat <- readMat(sub)
# posterior <- subMat[["posterior"]][,,1]
# str(posterior)
# dim(posterior)
#
output <- subMat[["out"]][,,1]
fits[subn,] <- subMat[["out"]][,,1]$fit[c(6,7)]
# str(output)
#
# output$fit
stats <- output[["suffStat"]]
# browser()
val_pe <- names(stats[c(25:35, 37, 40:47),1,1])
to_merge <- stats[c(25:35, 37, 40:47),1,]
value_trace <- stats[,,1][["gx"]]
value_df <- data.frame(id = sub_id, val_A = value_trace[1,], val_B = value_trace[2,], val_C = value_trace[3,])
value_list[[sub]] <- value_df
stats_df <- data_frame(trial = 1:300)
stats_df$id <- sub_id
for(var in val_pe){
stats_df <- stats_df %>% mutate(!!var := to_merge[[var]][1,])
}
value_df$trial <- 1:300
value_df
z <- dplyr::select(value_df, -c(id))
z
zz <- melt(data = z, id.vars = "trial", measure.vars = c("val_A", "val_B", "val_C"))
zz
value_plot <- ggplot(zz, aes(x = trial, y = value, color = variable)) + geom_line() +geom_point()+ geom_smooth() +scale_y_continuous(limits = c(0,1))+ ggtitle("Value Trace") + labs(y = "value")
cowplot::plot_grid(reinforcement_schedule, value_plot, ncol = 2)
value_plot
value_plot
cowplot::plot_grid(reinforcement_schedule, value_plot)#, ncol = 2)
value_plot <- ggplot(zz, aes(x = "trial", y = value, color = variable)) + geom_line() +geom_point()+ geom_smooth() +scale_y_continuous(limits = c(0,1))+ ggtitle("Value Trace") + labs(y = "value")
cowplot::plot_grid(reinforcement_schedule, value_plot)#, ncol = 2)
cowplot::plot_grid(reinforcement_schedule)#, value_plot)#, ncol = 2)
cowplot::plot_grid(reinforcement_schedule, sample_loess, nrow = 1)
